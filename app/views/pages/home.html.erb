<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <!-- Mapbox GL JS CSS -->
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css' rel='stylesheet' />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha384-k6RqeWeci5ZR/Lv4MR0sA0FfDOM68nM9qE3Bzq0sL5oFlUsc8fIOI4r7LLZKm0l7" crossorigin="anonymous">
    <title>Map with Sidebar</title>
    <style>
      /* Global box-sizing */
      *, *::before, *::after {
        box-sizing: border-box;
      }

      .floating-arrow {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%) translateY(0);
        font-size: 2.5rem;
        color: #ffffff;
        cursor: pointer;
        animation: bounce 2s infinite;
        text-decoration: none; /* Removes any hover text decoration */
        transition: 0.4s;
      }

      .floating-arrow:hover {
        color: #BC40B6;
      }

      /* Bouncing Animation */
      @keyframes bounce {
        0%, 100% {
          transform: translateX(-50%) translateY(0);
        }
        50% {
          transform: translateX(-50%) translateY(-10px);
        }
      }

      html, body {

        height: 100%;
        margin: 0;
        padding: 0;
        background-image: url(<%= asset_path 'star-bg.png' %>);
        background-size: cover;
        background-repeat: repeat;
      }

      /* Header Section */
      .header {

        min-height: 100vh; /* Occupies full viewport height */
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        text-align: center;
        background: rgba(0, 0, 0, 0.2); /* Optional: add a semi-transparent overlay for better text visibility */
      }

      .header h1 {
                font-family: "Source Code Pro", monospace;
        font-optical-sizing: auto;
        font-weight: bold;
        font-style: normal;
        font-size: 3rem; /* Adjusted for better responsiveness */
        text-shadow: 0px 0px 32px #FFE4AF;
        color: #fff;
        margin-bottom: 1.5rem;
      }

      .header form { /* Assuming the search form is inside a form tag */
        width: 100%;
        max-width: 500px;
      }

      .header input[type="text"] {
        width: 80%;
        padding: 0.75rem;
        border: none;
        border-radius: 0.5rem 0 0 0.5rem;
        font-size: 1rem;
      }

      .header button {
        padding: 0.75rem;
        border: none;
        border-radius: 0 0.5rem 0.5rem 0;
        background-color: #ff5722;
        color: #fff;
        font-size: 1rem;
        cursor: pointer;
      }

      .header button:hover {
        background-color: #e64a19;
      }

      /* Main Content Section */
      .main-content {
        display: flex;
        padding: 3rem;
        min-height: 100vh; /* Ensures it takes up enough space */
        background: rgba(0, 0, 0, 0.2); /* Optional: background for better contrast */
      }

      /* Map Column */
      .map-column {

        flex: 2;
        padding: 1rem;
        min-width: 0; /* Prevents overflow due to long content */
      }

      #map {
        width: 100%;
        border-radius: 1.2rem;
        box-shadow: 0px 0px 16px #FFE4AF;
        flex: 1 1 0;
        min-height: 0; /* Ensures both elements can adjust to available height */
        height: 100%; /* Occupies full height within the container */
      }

      /* Sidebar Column */
      .sidebar-column {
        flex: 1;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        min-width: 0; /* Prevents overflow due to long content */
      }

      #sidebar {
        background: #fff; /* Changed from #323232 to white */
        color: #000; /* Changed from #fff to black */
        border-radius: 1.2rem;
        box-shadow: 0px 0px 16px #FFE4AF; /* Adjusted shadow for lighter background */
        flex: 1; /* Sidebar takes up the available vertical space */
        display: flex;
        flex-direction: column;
        min-height: 0; /* Allows the sidebar to shrink properly */
      }

      #sidebar-header {
        padding: 1.5rem;
        border-bottom: 1px solid #ccc; /* Changed border color for lighter theme */
        flex: 0 0 auto; /* Prevents the header from stretching */
      }

      #satellite-cards {

        border-radius: 1.2rem;
        display: flex;
        flex-wrap: wrap;
        gap: 1rem; /* Space between cards */
        font-size: 60%;
        flex: 1 1 0;
        min-height: 0;
        height: 100%;
        padding: 1rem;
        overflow-y: auto;
        background: #fff; /* Ensure the container has a white background */
      }

      .card {
        width: calc(33.33% - 0.8rem); /* Three cards per row with gap */
        height: 120px; /* Set a fixed height */
        background-color: #f8f9fa; /* Changed from #424242 to a light shade of white */
        color: #000; /* Changed from #fff to black */
        border: none;
        border-radius: 0.75rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: start;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Added subtle shadow for depth */
      }

      /* Hide scrollbar for Chrome, Safari, and Opera */
      #satellite-cards::-webkit-scrollbar {
        display: none;
      }

      /* Hide scrollbar for Internet Explorer and Edge */
      #satellite-cards {
        -ms-overflow-style: none; /* IE and Edge */
      }

      /* Styles for the satellite cards */

      .card-title {
        font-size: 120%;
        margin-bottom: 0.2rem;
      }

      .card-text {
        margin-bottom: 0.25rem;
      }

      /* Responsive Adjustments */
      @media (max-width: 768px) {
        .main-content {
          flex-direction: column;
        }

        .map-column, .sidebar-column {
          flex: none;
          width: 100%;
          padding: 0;
        }

        #map {

          height: 300px;
        }

        .card {
          width: calc(50% - 0.8rem); /* Two cards per row on smaller screens */
        }
      }
    </style>
  </head>
  <body>
    <!-- Header Section -->
    <header class="header" id="header">
      <h1>satelitesaboveme.com</h1>
      <%= render 'search' %>
    </header>
    <a href="#end" class="floating-arrow" aria-label="Scroll Down" onclick="scrollToMainContentBottom(event)">
      <i class="fa-solid fa-chevron-down" style="text-shadow: 0px 0px 32px #FFE4AF;"></i>
    </a>
    <!-- Main Content Section -->
    <main class="main-content" id="main-content">
      <!-- Map Column -->
      <div class="map-column">
        <div id="map"></div>
      </div>
      <!-- Sidebar Column -->
      <div class="sidebar-column">
        <div id="sidebar">
          <div id="sidebar-header">
            <h4 id="sidebar-title" class="text-center mb-4">Satellites Above Poznan...</h4>
            <div class="d-flex gap-2">
              <!-- Search Again Button -->
              <div class="w-50 d-flex align-items-center justify-content-center text-center bg-light py-2 rounded-3">
                <p href="#header" class="mb-0">Search again</p>
              </div>
              <!-- Learn More Button -->
              <div class="w-50 d-flex align-items-center justify-content-center text-center bg-light py-2 rounded-3">
                <p class="mb-0">Learn more</p>
              </div>
            </div>
            <!-- Added id for dynamic updates -->
          </div>
          <div id="satellite-cards">
            <!-- Satellite cards will go here -->
            <div id="end"></div>
          </div>
        </div>
      </div>
    </main>
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js'></script>
    <script>
      // Replace with your Mapbox API access token
      mapboxgl.accessToken = "<%= @mapbox_token %>";

      // Initialize the map with disabled interactions
      const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [16.931992, 52.409538],
        zoom: 5,
        interactive: false
      });

      // Store markers globally to remove them later
      window.markers = [];

      // Initial satellite data from Ruby controller
      let satellites = <%= raw @satelites_list.to_json %>;

      // Function to initialize the map and satellite cards
      function initializeMapAndCards(satellites, observerLat, observerLng, locationName) {
        // Update map center
        map.setCenter([observerLng, observerLat]);

        // Remove existing markers
        window.markers.forEach(marker => marker.remove());
        window.markers = [];

        // Get the satellite cards container
        const satelliteCardsContainer = document.getElementById('satellite-cards');
        // Clear existing cards
        satelliteCardsContainer.innerHTML = '';

        satellites.forEach((satellite) => {
          // Create a marker on the map
          const marker = new mapboxgl.Marker({ color: "red" })
            .setLngLat([satellite.observer_lng, satellite.observer_lat])
            .setPopup(new mapboxgl.Popup().setText(satellite.satname))
            .addTo(map);

          window.markers.push(marker);

          // Create a card for the sidebar
          const card = document.createElement('div');
          card.className = 'card';

          const cardBody = document.createElement('div');
          cardBody.className = 'card-body';

          const title = document.createElement('h5');
          title.className = 'card-title';
          title.textContent = satellite.satname;

          const lat = document.createElement('p');
          lat.className = 'card-text';
          lat.textContent = `Latitude: ${satellite.observer_lat.toFixed(4)}`;

          const lng = document.createElement('p');
          lng.className = 'card-text';
          lng.textContent = `Longitude: ${satellite.observer_lng.toFixed(4)}`;

          const distance = document.createElement('p');
          distance.className = 'card-text';
          distance.textContent = `Distance: ${satellite.distance.toFixed(2)} km`;

          cardBody.appendChild(title);
          cardBody.appendChild(lat);
          cardBody.appendChild(lng);
          cardBody.appendChild(distance);
          card.appendChild(cardBody);

          satelliteCardsContainer.appendChild(card);
        });

        // Update the sidebar title with the entered location
        const sidebarTitle = document.getElementById('sidebar-title');
        sidebarTitle.textContent = `Satellites Above ${locationName} 📡`;
      }

      // Initialize map and cards on page load with default location
      initializeMapAndCards(satellites, 52.409538, 16.931992, 'Poznan');

      // Add event listener for the search form submission
      document.addEventListener('DOMContentLoaded', function() {
        const searchForm = document.getElementById('search-form');
        const searchQueryInput = document.getElementById('search-query');

        searchForm.addEventListener('submit', function(event) {
          event.preventDefault(); // Prevent default form submission

          const query = searchQueryInput.value.trim();

          if (!query) {
            alert('Please enter a city name.');
            return;
          }

          // Send AJAX request to the search action
          fetch(`/search?query=${encodeURIComponent(query)}`)
            .then(response => {
              if (!response.ok) {
                return response.json().then(errData => {
                  throw new Error(errData.error || 'Unknown error occurred');
                });
              }
              return response.json();
            })
            .then(data => {
              if (data.error) {
                alert(data.error);
                return;
              }

              // Update the map and the cards with the new data
              initializeMapAndCards(data.satellites, data.observer_lat, data.observer_lng, query);
            })
            .catch(error => {
              console.error('Error fetching data:', error);
              alert(`An error occurred: ${error.message}`);
            });
        });
      });
    </script>
    <!-- Optional Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  </body>
</html>
